// .NAME vtkMeasurementsGUI
// .SECTION Description
// Slicer Welcome and Overview


#ifndef __vtkMeasurementsGUI_h
#define __vtkMeasurementsGUI_h

#include "vtkMeasurementsWin32Header.h"
#include "vtkSlicerModuleGUI.h"
#include "vtkMeasurementsLogic.h"
#include "vtkSlicerModuleCollapsibleFrame.h"
#include <string>

class vtkKWFrame;
class vtkKWCheckButton;
#if ( (VTK_MAJOR_VERSION >= 6) || ( VTK_MAJOR_VERSION == 5 && VTK_MINOR_VERSION >= 4 ) )
class vtkLineWidget2;
class vtkAngleWidget;
class vtkPointHandleRepresentation3D;
class vtkLineRepresentation;
class vtkAngleRepresentation3D;
class vtkPolygonalSurfacePointPlacer;
#endif
class vtkSlicerNodeSelectorWidget;
class VTK_MEASUREMENTS_EXPORT vtkMeasurementsGUI : public vtkSlicerModuleGUI
{
  public:
  static vtkMeasurementsGUI *New();
  vtkTypeRevisionMacro(vtkMeasurementsGUI,vtkSlicerModuleGUI);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Description:
  // Set the logic pointer from parent class pointer.
  // Overloads implementation in vtkSlicerModulesGUI
  // to allow loadable modules.
  virtual void SetModuleLogic ( vtkSlicerLogic *logic )
  {
  this->SetLogic(reinterpret_cast<vtkMeasurementsLogic*> (logic)); 
  };

   // Description: Get/Set MRML node
  vtkGetObjectMacro (Logic, vtkMeasurementsLogic);
  vtkSetObjectMacro (Logic, vtkMeasurementsLogic);

  // Description:
  // Create widgets

  virtual void BuildGUI ( );
  virtual void TearDownGUI ( );
  vtkIntArray *NewObservableEvents();

  // Description:
  // Add obsereves to GUI widgets
  virtual void AddGUIObservers ( );

  // Description:
  // Remove obsereves to GUI widgets
  virtual void RemoveGUIObservers ( );
  
  // Description:
  // Pprocess events generated by GUI widgets
  virtual void ProcessGUIEvents ( vtkObject *caller, unsigned long event,
                                  void *callData );

  // Description:
  // Describe behavior at module startup and exit.
  virtual void Enter ( );
  virtual void Exit ( );
  virtual void Init ( );

  vtkGetObjectMacro(RulerCheckButton, vtkKWCheckButton);

  vtkGetObjectMacro(AngleCheckButton, vtkKWCheckButton);

#if ( (VTK_MAJOR_VERSION >= 6) || ( VTK_MAJOR_VERSION == 5 && VTK_MINOR_VERSION >= 4 ) )
//  vtkGetObjectMacro(DistanceWidget, vtkLineWidget2);
//  vtkGetObjectMacro(AngleWidget, vtkAngleWidget);
#endif

protected:
  vtkMeasurementsGUI();
  ~vtkMeasurementsGUI();
  vtkMeasurementsGUI(const vtkMeasurementsGUI&);
  void operator=(const vtkMeasurementsGUI&);

  // Description:
  // updates status text in the slicer window.
  void SetStatusText( const char *txt);
  vtkMeasurementsLogic *Logic;

#if ( (VTK_MAJOR_VERSION >= 6) || ( VTK_MAJOR_VERSION == 5 && VTK_MINOR_VERSION >= 4 ) )
  // Description:
  // the ruler widget
  vtkPointHandleRepresentation3D *DistanceHandleRepresentation;
  vtkLineRepresentation *DistanceRepresentation;
  vtkLineWidget2 *DistanceWidget;
  vtkPolygonalSurfacePointPlacer *RulerModel1PointPlacer;
  vtkPolygonalSurfacePointPlacer *RulerModel2PointPlacer;

  // Description:
  // the angle widget
  vtkPointHandleRepresentation3D *AngleHandleRepresentation;
  vtkAngleRepresentation3D *AngleRepresentation;
  vtkAngleWidget *AngleWidget;
#endif

  // Description:
  // GUI elements
  vtkKWCheckButton *RulerCheckButton;
  vtkSlicerNodeSelectorWidget* RulerModel1SelectorWidget;
  vtkSlicerNodeSelectorWidget* RulerModel2SelectorWidget;
  vtkKWCheckButton *AngleCheckButton;
};

#endif

